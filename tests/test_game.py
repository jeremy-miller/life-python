import numpy
import pytest
from life.game import GameClass


@pytest.fixture
def grid():
  grid = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
    [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  ]
  return grid


@pytest.fixture
def output():
  return '\n'.join([
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . O . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . O . O . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . O O . . . . . . O O . . . . . . . . . . . . O O . . .',
    ' . . . . . . . . . . . . O . . . O . . . . O O . . . . . . . . . . . . O O . . .',
    ' . O O . . . . . . . . O . . . . . O . . . O O . . . . . . . . . . . . . . . . .',
    ' . O O . . . . . . . . O . . . O . O O . . . . O . O . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . O . . . . . O . . . . . . . O . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . O . . . O . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . O O . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    '',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . O . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . O . O . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . O . . . . . . . O . O . . . . . . . . . . . O O . . .',
    ' . . . . . . . . . . . . O O . . . . . . O . . O . . . . . . . . . . . O O . . .',
    ' . O O . . . . . . . . O O . . . . O O . . O . O . . . . . . . . . . . . . . . .',
    ' . O O . . . . . . . O O O . . . . O O . . . O . O . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . O O . . . . O O . . . . . O . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . O O . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . O . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .',
    '\n'
  ])


def test_run(grid, output, capsys):
  iterations = 1
  game = GameClass()
  game.run(iterations=iterations)
  assert numpy.array_equal(game._grid, grid), 'grids did not match'
  out, _ = capsys.readouterr()
  assert out == output, 'grid display failed'
